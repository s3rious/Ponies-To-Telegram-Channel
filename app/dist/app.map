{"version":3,"sources":["config.js","logger.js","mongo.js","grabber.js","poster.js","jobs.js","app.js"],"names":["GRABBING_CRON_INTERVAL","process","env","GRABBING_PAGES","parseInt","GRABBING_URLS","POSTING_CRON_INTERVAL","TELEGRAM_BOT_TOKEN","TELEGRAM_CHANNEL_NAME","MONGO_DATABASE","MONGO_USER","MONGO_PASSWORD","validateExistance","constants","Object","keys","forEach","name","Error","STATUSES","intel","config","handlers","Console","VERBOSE","File","logger","getLogger","MONGO_ADDR","MONGO_PORT_27017_TCP_ADDR","MONGO_PORT","MONGO_PORT_27017_TCP_PORT","mongoose","Promise","connect","imageSchema","Schema","type","Number","index","String","Image","model","info","html","url","json","data","cheerio","load","$","lastEp","s","episodeSeason","e","episodeNumber","error","getLastEpisode","images","spoilerEpRegexp","filter","image","allowed","tags","test","match","spoilerEp","id","filterSpoilers","page","woDupes","filterDupes","search","woSpoilers","result","map","i","httpsiseUrl","representations","large","source_url","original_format","mime_type","UNPUBLISHED","processResponseData","getUrlForPage","clearData","grapPage","pages","reduce","p","then","resolve","grabOnePageAfterAnother","pagesCount","arrayedData","flattenData","length","getInfoFromPages","urls","getInfo","saved","savedImage","findOne","save","saveImageIfNotExist","savedCount","all","Boolean","m","b","storeImages","getUrlsForGrabbing","storedImages","grabImages","split","haveDupes","duplicate_reports","status","failedStatus","processingImage","changeImageStatus","path","reject","get","src","response","imageBody","statusCode","format","Buffer","ERROR","downloadImage","isGif","action","key","sendedImage","caption","original_source","telegramApi","message_id","sendMessage","sendImageToChannel","deletedTemp","deleteTemp","PROCESSING","postedImage","POSTED","postImage","unpostedImages","find","sort","postNow","Math","ceil","imagesToPost","postOneAfterAnother","postImages","requestNode","require","defaults","encoding","Telegram","token","grabbing","CronJob","posting"],"mappings":"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","file":"app.map","sourceRoot":"../src","sourcesContent":["const GRABBING_CRON_INTERVAL = process.env.GRABBING_CRON_INTERVAL;\nconst GRABBING_PAGES = process.env.GRABBING_PAGES ? parseInt(process.env.GRABBING_PAGES, 10) : null;\nconst GRABBING_URLS = process.env.GRABBING_URLS;\nconst POSTING_CRON_INTERVAL = process.env.POSTING_CRON_INTERVAL;\nconst TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;\nconst TELEGRAM_CHANNEL_NAME = process.env.TELEGRAM_CHANNEL_NAME;\nconst MONGO_DATABASE = process.env.MONGO_DATABASE;\nconst MONGO_USER = process.env.MONGO_USER;\nconst MONGO_PASSWORD = process.env.MONGO_PASSWORD;\n\nfunction validateExistance(constants) {\n  return Object.keys(constants).forEach((name) => {\n    if (!constants[name]) {\n      throw new Error(`process.env.${name} variable is empty`);\n    }\n  });\n}\n\nvalidateExistance({\n  GRABBING_CRON_INTERVAL,\n  GRABBING_PAGES,\n  GRABBING_URLS,\n  POSTING_CRON_INTERVAL,\n  TELEGRAM_BOT_TOKEN,\n  TELEGRAM_CHANNEL_NAME,\n  MONGO_DATABASE,\n  MONGO_USER,\n  MONGO_PASSWORD\n});\n\nconst STATUSES = {\n  UNPUBLISHED: 'unpublished',\n  PROCESSING: 'processing',\n  POSTED: 'posted',\n  ERROR: 'error'\n};\n\nexport default {\n  GRABBING_CRON_INTERVAL,\n  GRABBING_PAGES,\n  GRABBING_URLS,\n  POSTING_CRON_INTERVAL,\n  TELEGRAM_BOT_TOKEN,\n  TELEGRAM_CHANNEL_NAME,\n  MONGO_DATABASE,\n  MONGO_USER,\n  MONGO_PASSWORD,\n  STATUSES\n};\n","import intel from 'intel';\n\nintel.config({\n  formatters: {\n    simple: {\n      format: '[%(date)s] %(levelname)s: %(message)s',\n      colorize: false\n    },\n  },\n  handlers: {\n    console: {\n      class: intel.handlers.Console,\n      formatter: 'simple',\n      level: intel.VERBOSE\n    },\n    file: {\n      class: intel.handlers.File,\n      level: intel.VERBOSE,\n      file: './logs/verbose.log',\n      formatter: 'simple'\n    }\n  },\n  loggers: {\n    logger: {\n      handlers: ['console', 'file'],\n      level: intel.VERBOSE,\n      handleExceptions: true,\n      exitOnError: false,\n      propagate: false\n    }\n  }\n});\n\nexport const logger = intel.getLogger('logger');\n","import mongoose, { Schema } from 'mongoose';\n\nimport { MONGO_DATABASE, MONGO_USER, MONGO_PASSWORD } from './config.js';\n\nconst MONGO_ADDR = process.env.MONGO_PORT_27017_TCP_ADDR || 'localhost';\nconst MONGO_PORT = process.env.MONGO_PORT_27017_TCP_PORT || 27017;\n\nmongoose.Promise = Promise;\n\nmongoose.connect(\n  `mongodb://${MONGO_ADDR}:${MONGO_PORT}/${MONGO_DATABASE}`,\n  {\n    user: MONGO_USER,\n    pass: MONGO_PASSWORD\n  }\n);\n\nconst imageSchema = new Schema(\n  {\n    id: { type: Number, index: true },\n    src: String,\n    original_source: String,\n    format: String,\n    mime_type: String,\n    status: { type: String, index: true },\n  },\n  {\n    timestamps: true\n  }\n);\n\nconst Image = mongoose.model('Image', imageSchema);\n\nexport default {\n  mongoose,\n  Image\n};\n","import request from 'request-promise';\nimport cheerio from 'cheerio';\nimport { range, flattenDeep } from 'lodash';\n\nimport { logger } from './logger';\nimport { Image } from './mongo.js';\n\nimport { GRABBING_URLS, STATUSES } from './config.js';\n\nfunction getUrlsForGrabbing() {\n  return GRABBING_URLS.split(',');\n}\n\nfunction getUrlForPage(url, page) {\n  return `${url}&page=${page}`;\n}\n\nasync function getLastEpisode() {\n  try {\n    logger.info('... getting last episode...');\n    const html = await request({ url: 'http://mlp-episodes.tk/', json: false });\n    const $ = cheerio.load(html);\n    const data = $('.mlpepisode_new').data();\n    const lastEp = { s: data.episodeSeason, e: data.episodeNumber };\n    logger.info('... last episode is:', lastEp);\n    return lastEp;\n  } catch (e) {\n    const lastEp = { s: 0, e: 0 };\n    logger.info('... something went wrong, let’s consider last episode is:', lastEp);\n    logger.error(e);\n    return lastEp;\n  }\n}\n\nfunction httpsiseUrl(url) {\n  return /^http/.test(url) ? url : `https:${url}`;\n}\n\nfunction filterDupes(images) {\n  return images.filter((image) => {\n    const haveDupes = image.duplicate_reports.length > 0;\n    if (haveDupes) {\n      logger.info(`... image ${image.id} filtered due to duplicate report...`);\n    }\n    return !haveDupes;\n  });\n}\n\nasync function filterSpoilers(images, lastEp) {\n  const spoilerEpRegexp = /spoiler:s(\\d{2})e(\\d{2})/;\n\n  return images.filter((image) => {\n    let allowed = true;\n    const tags = image.tags;\n    if (spoilerEpRegexp.test(tags)) {\n      const match = tags.match(spoilerEpRegexp, '$1,$2');\n      const spoilerEp = { s: parseInt(match[1], 10), e: parseInt(match[2], 10) };\n      allowed = Number(`${lastEp.s}${lastEp.e}`) > Number(`${spoilerEp.s}${spoilerEp.e}`);\n      if (!allowed) {\n        logger.info(`... image ${image.id} filtered due to spoiler alert for s${spoilerEp.s}e${spoilerEp.e}...`);\n      }\n    }\n    return allowed;\n  });\n}\n\nasync function processResponseData(data, page, lastEp) {\n  const images = data.search;\n  const woDupes = filterDupes(images);\n  logger.info(`... dupes for page ${page} cleared...`);\n  const woSpoilers = await filterSpoilers(woDupes, lastEp);\n  logger.info(`... spoilers for page ${page} cleared...`);\n  const result = woSpoilers.map(i => ({\n    id: parseInt(i.id, 10),\n    src: httpsiseUrl(i.representations.large),\n    original_source: i.source_url ? i.source_url : `https://derpibooru.org/${i.id}`,\n    format: i.original_format,\n    mime_type: i.mime_type,\n    status: STATUSES.UNPUBLISHED\n  }));\n  return result;\n}\n\nasync function grapPage(url, page, lastEp) {\n  logger.info(`... grabbing page ${page}...`);\n  try {\n    const data = await request({ url: getUrlForPage(url, page), json: true });\n    logger.info(`... got response for page ${page}...`);\n    const clearData = await processResponseData(data, page, lastEp);\n    return clearData;\n  } catch (e) {\n    logger.info(`... something went wrong ${page} didn't grabbed...`);\n    logger.error(e);\n    return [];\n  }\n}\n\nasync function grabOnePageAfterAnother(url, pages, lastEp) {\n  let images = [];\n  await pages.reduce(\n    (p, page) => p.then(async () => {\n      const result = await grapPage(url, page, lastEp);\n      images = [...images, ...result];\n    }),\n    new Promise(resolve => resolve())\n  );\n  return images;\n}\n\nasync function getInfoFromPages(url, pagesCount, lastEp) {\n  logger.info(`... grabbing ${pagesCount} pages from ${url}...`);\n  const pages = range(1, pagesCount + 1, 1);\n  const arrayedData = await grabOnePageAfterAnother(url, pages, lastEp);\n  const flattenData = flattenDeep(arrayedData);\n  logger.info(`... ${pagesCount} pages from ${url} grabbed, we’ve got ${flattenData.length} images...`);\n  return flattenData;\n}\n\nasync function getInfo(urls, pagesCount, lastEp) {\n  let images = [];\n  await urls.reduce(\n    (p, url) => p.then(async () => {\n      const result = await getInfoFromPages(url, pagesCount, lastEp);\n      images = [...images, ...result];\n    }),\n    new Promise(resolve => resolve())\n  );\n  return images;\n}\n\nasync function saveImageIfNotExist(image) {\n  let saved = null;\n  logger.info(`... saving ${image.id} to mongo...`);\n  let savedImage = await Image.findOne({ id: image.id });\n  if (!savedImage) {\n    savedImage = new Image({ ...image });\n    saved = savedImage.save();\n    logger.info(`... image ${image.id} saved to mongo...`);\n  } else {\n    logger.info(`... image ${image.id} is already exist in mongo database...`);\n  }\n  return saved;\n}\n\nasync function storeImages(images) {\n  logger.info(`... saving ${images.length} images to mongo...`);\n  const savedArray = await Promise.all(images.map(i => saveImageIfNotExist(i)));\n  const savedCount = savedArray.map((s) => Number(Boolean(s))).reduce((m = 0, b) => m + b);\n  return savedCount;\n}\n\nexport async function grabImages(pagesCount) {\n  logger.info('New grabbing job started...');\n  const lastEp = await getLastEpisode();\n  const urls = getUrlsForGrabbing();\n  const images = await getInfo(urls, pagesCount, lastEp);\n  const storedImages = await storeImages(images);\n  logger.info(`... ${storedImages} new images stored!`);\n}\n","const requestNode = require('request').defaults({ encoding: null });\nimport { writeFile, unlink } from 'fs-promise';\nimport { take } from 'lodash';\nimport Telegram from 'telegram-bot-api';\n\nimport { STATUSES, TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_NAME } from './config.js';\nimport { Image } from './mongo.js';\nimport { logger } from './logger';\nconst { UNPUBLISHED, PROCESSING, POSTED, ERROR } = STATUSES;\n\nconst telegramApi = new Telegram({ token: TELEGRAM_BOT_TOKEN });\n\nasync function changeImageStatus(image, status, failedStatus = UNPUBLISHED) {\n  let processingImage = image;\n\n  try {\n    logger.info(`... setting processing status for image ${processingImage.id}...`);\n    processingImage.status = status;\n    await processingImage.save();\n    logger.info('... status changed...');\n  } catch (e) {\n    processingImage = null;\n    logger.info(`... something went wrong, ${processingImage.id} status isn't changed, trying to revert it...`);\n    logger.error(e);\n    processingImage.status = failedStatus;\n    await processingImage.save();\n  }\n\n  return processingImage;\n}\n\nasync function downloadImage(image) {\n  let path = null;\n\n  try {\n    logger.info(`... downloading image ${image.id}...`);\n    path = await new Promise((resolve, reject) => {\n      // TODO: Promisify the shit outta here\n      requestNode.get(image.src, async (error, response, imageBody) => {\n        if (!error && response.statusCode === 200) {\n          path = `./.tmp/${image.id}.${image.format}`;\n          await writeFile(path, new Buffer(imageBody));\n          logger.info(`... image ${image.id} downloaded...`);\n          resolve(path);\n        } else {\n          reject(error);\n          throw new Error(error);\n        }\n      });\n    });\n  } catch (e) {\n    logger.info(`... something went wrong, ${image.id} isn't downloaded...`);\n    changeImageStatus(image, ERROR);\n    logger.error(e);\n  }\n\n  return path;\n}\n\nasync function sendImageToChannel(image, path) {\n  const isGif = image.format === 'gif';\n  const action = isGif ? 'sendDocument' : 'sendPhoto';\n  const key = isGif ? 'document' : 'photo';\n  let sendedImage = null;\n\n  let data = {\n    chat_id: `@${TELEGRAM_CHANNEL_NAME}`,\n    [key]: path\n  };\n\n  if (!isGif) {\n    data = { ...data, caption: image.original_source };\n  }\n\n  try {\n    logger.info(`... posting ${image.id} ${key} to a @${TELEGRAM_CHANNEL_NAME} channel...`);\n    const response = await telegramApi[action](data);\n    if (isGif) {\n      const { message_id } = response;\n      await telegramApi.sendMessage({\n        chat_id: `@${TELEGRAM_CHANNEL_NAME}`,\n        text: image.original_source,\n        reply_to_message_id: message_id,\n        disable_web_page_preview: 'true'\n      });\n    }\n    logger.info(`... ${image.id} posted into a @${TELEGRAM_CHANNEL_NAME}...`);\n    sendedImage = image;\n  } catch (e) {\n    logger.info(`... something went wrong, ${image.id} isn't posted...`);\n    changeImageStatus(image, ERROR);\n    logger.error(e);\n  }\n\n  return sendedImage;\n}\n\nasync function deleteTemp(path) {\n  let deletedTemp = null;\n\n  try {\n    logger.info(`... deleting temporary file at ${path}...`);\n    deletedTemp = await unlink(path);\n    logger.info(`... ${path} deleted...`);\n  } catch (e) {\n    logger.info(`... something went wrong, ${path} isn't deleted...`);\n    logger.error(e);\n  }\n\n  return deletedTemp;\n}\n\nasync function postImage(image) {\n  logger.info(`... posting image ${image.id}...`);\n  const processingImage = await changeImageStatus(image, PROCESSING);\n  const path = await downloadImage(processingImage);\n  const sendedImage = await sendImageToChannel(processingImage, path);\n  const postedImage = await changeImageStatus(sendedImage, POSTED);\n  logger.info(`... ${image.id} posted...`);\n  await deleteTemp(path);\n  return postedImage;\n}\n\nfunction postOneAfterAnother(images) {\n  return images.reduce(\n    (p, image) => p.then(() => postImage(image)),\n    new Promise(resolve => resolve())\n  );\n}\n\nexport async function postImages() {\n  logger.info('New posting job started...');\n  const unpostedImages = await Image.find({ status: UNPUBLISHED }).sort({ id: -1 });\n  logger.info(`... we've got ${unpostedImages.length} unposted images...`);\n  let postNow = Math.ceil(unpostedImages.length / 10);\n  postNow = postNow < 5 && postNow > 0 ? postNow = 5 : postNow;\n  const imagesToPost = take(unpostedImages, postNow);\n  if (imagesToPost.length > 0) {\n    logger.info(`... posting ${imagesToPost.length} right now...`);\n    await postOneAfterAnother(imagesToPost);\n  } else {\n    logger.info('... nothing to post...');\n  }\n  logger.info(`${imagesToPost.length} images posted!`);\n}\n","import { CronJob } from 'cron';\n\nimport { GRABBING_CRON_INTERVAL, GRABBING_PAGES, POSTING_CRON_INTERVAL } from './config.js';\nimport { grabImages } from './grabber.js';\nimport { postImages } from './poster.js';\n\nconst grabbing = new CronJob({\n  cronTime: GRABBING_CRON_INTERVAL,\n  onTick: () => grabImages(GRABBING_PAGES),\n  start: true,\n  runOnInit: true\n});\n\nconst posting = new CronJob({\n  cronTime: POSTING_CRON_INTERVAL,\n  onTick: () => postImages(posting),\n  start: true,\n  runOnInit: true\n});\n\nexport default {\n  grabbing,\n  posting\n};\n","require('babel-register');\nrequire('babel-polyfill');\n\nrequire('./jobs.js');\n"]}